 --Q1) 
ALTER TABLE CDS ALTER COLUMN CD_CODE NVARCHAR(5) NOT NULL
ALTER TABLE STORES ALTER COLUMN STORE_CODE NVARCHAR(5) NOT NULL
ALTER TABLE STORES ALTER COLUMN STORE_NAME NVARCHAR(20) NOT NULL
ALTER TABLE AVAILABILITY ALTER COLUMN CD_CODE NVARCHAR(5) NOT NULL
ALTER TABLE AVAILABILITY ALTER COLUMN STORE_CODE NVARCHAR(5) NOT NULL

--Q2) 
ALTER TABLE CDS ADD primary key (CD_CODE)
ALTER TABLE STORES ADD primary key (STORE_CODE)
ALTER TABLE AVAILABILITY ADD primary key (CD_CODE, STORE_CODE)
ALTER TABLE AVAILABILITY ADD foreign key (CD_CODE) REFERENCES CDS(CD_CODE)
ALTER TABLE AVAILABILITY ADD foreign key (STORE_CODE) REFERENCES STORES(STORE_CODE)

--Q3) 
CREATE VIEW LatestReleases AS
SELECT TITLE, ARTIST, PRICE 
FROM CDS
WHERE DATEPART(YY, RELEASE_DATE) BETWEEN 2016 AND 2017
AND PRICE <= 160

SELECT * FROM LatestReleases

--Q4) 
CREATE Procedure FindStock @findCD Nvarchar(5) As
SELECT S.STORE_NAME,  S.ADDRESS, S.CITY
FROM STORES S, AVAILABILITY A
WHERE A.STORE_CODE = S.STORE_CODE
AND A.CD_CODE = @findcd


Exec FindStock 'CD004'

--Q5) UPDATE CDS 
SET PRICE = ROUND(PRICE + PRICE *0.1,0)

--Q6)
SELECT TOP 2 C.CD_CODE, C.TITLE, C.ARTIST, C.PRICE, SUM(AVAILABLE_STOCK) AS
'STOCK AVAILABLE'
FROM AVAILABILITY A, CDS C
WHERE C.CD_CODE = A.CD_CODE
GROUP BY C.CD_CODE, C.TITLE, C.ARTIST, C.PRICE
ORDER BY SUM(AVAILABLE_STOCK) DESC

--Q7) 
--same cd
SELECT A1.CD_CODE, A1.STORE_CODE, A2.CD_CODE, A2.STORE_CODE
FROM AVAILABILITY A1, AVAILABILITY A2
WHERE A1.STORE_CODE <>A2.STORE_CODE AND 
A1.CD_CODE = A2.CD_CODE

--Q8) 
IF EXISTS 
(SELECT CD_CODE, TITLE, RELEASE_DATE
FROM CDS
WHERE DATEPART(YY, RELEASE_DATE) = 2017)
BEGIN 
SELECT CD_CODE, TITLE, RELEASE_DATE INTO RecentReleases
FROM CDS
WHERE DATEPART(YY,RELEASE_DATE) = 2017
END 
ELSE 
PRINT 'no releases available'

Select * from RecentReleases

--Q9)
SELECT TITLE, ARTIST, RELEASE_DATE, 
DATEPART(YY, GETDATE()) - DATEPART(YY,RELEASE_DATE) AS 'YEARS AVAILABLE'
FROM CDS
ORDER BY DATEPART(YY,GETDATE()) - DATEPART(YY,RELEASE_DATE) DESC

--Q10) 
SELECT DISTINCT C.CD_CODE, C.TITLE, C.ARTIST, 'STATUS'= 
CASE 
WHEN A.CD_CODE IS NOT NULL THEN 'IN STOCK' 
ELSE 'OUT OF STOCK' 
END
FROM CDS C 
LEFT OUTER JOIN AVAILABILITY A ON C.CD_CODE = A.CD_CODE

--Q11) 
SELECT TITLE, ARTIST, PRICE
FROM CDS
GROUP BY TITLE, ARTIST, PRICE
HAVING PRICE NOT IN (109,154)
ORDER BY PRICE DESC